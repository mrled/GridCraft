[
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [],
    "Variable": [],
    "desc": "An action menu based on StarCraft II Grid Hotkeys.",
    "doc": "An action menu based on StarCraft II Grid Hotkeys.\n\n<https://github.com/mrled/GridCraft>\n\nThis is the main module for GridCraft.\nAll functionality is contained in the submodules.\n\nExample:\n```lua\nspoon.GridCraft.Grid.new(\n  { \"ctrl\", \"shift\" },\n  \"f11\",\n  {\n    {\n      spoon.GridCraft.Action.new { key = \"e\", application = \"Terminal\", icon = spoon.GridCraft.Icon.phosphor(\"terminal-window\", \"regular\") },\n      spoon.GridCraft.Action.new { key = \"d\", application = \"Visual Studio Code\", description = \"VS Code\" },\n    },\n    {\n      spoon.GridCraft.Action.new { key = \"d\", file = os.getenv(\"HOME\") .. \"/Downloads\" },\n      spoon.GridCraft.Action.new { key = \"f\", application = \"Finder\" },\n    },\n  },\n  \"GridCraftExample\"\n)\n```\nFor more complete examples, see:\n* `../example.lua`\n* The documentation at <https://pages.micahrl.com/GridCraft>",
    "items": [],
    "name": "GridCraft",
    "stripped_doc": [],
    "submodules": [
      "Action",
      "Configuration",
      "Grid",
      "Icon",
      "Util",
      "WebView"
    ],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [
      {
        "def": "GridCraft.Action.new(table) -> table",
        "desc": "Create a new action for a grid",
        "doc": "Create a new action for a grid\n\nParameters:\n * arg - A table containing the parameters for the action.\n   * Basic parameters:\n     * mods: (table) Modifier keys like `{\"cmd\", \"ctrl\"}` to trigger the action along with the key. Use `{}` for no modifiers\n     * key: (string) A key to trigger the action along with the modifiers, like \"x\" or \"F11\".\n     * handler: (function) Code to run when the key is pressed\n     * description: (string) A description for the action\n     * icon: (string) An svg or img tag to display as the icon for the action (optional)\n   * Convenience parameters:\n     * empty: (boolean) If true, the handler is set to a no-op function and the description is set to \"No action\".\n       This is useful for creating empty slots in the grid.\n       Overrides handler, description, and icon.\n     * application: (string) The name of an application to switch to.\n       Overrides handler.\n       If description/icon are not provided, set to app name/icon.\n     * submenu: (table) A table of actions to create a submenu for this action.\n       Overrides handler.\n\nNotes:\n * Together, the mods and key are passed to `hs.hotkey.bind()` to create a regular Hammerspoon hotkey.",
        "name": "new",
        "notes": [
          " * Together, the mods and key are passed to `hs.hotkey.bind()` to create a regular Hammerspoon hotkey."
        ],
        "parameters": [
          " * arg - A table containing the parameters for the action.",
          "   * Basic parameters:",
          "     * mods: (table) Modifier keys like `{\"cmd\", \"ctrl\"}` to trigger the action along with the key. Use `{}` for no modifiers",
          "     * key: (string) A key to trigger the action along with the modifiers, like \"x\" or \"F11\".",
          "     * handler: (function) Code to run when the key is pressed",
          "     * description: (string) A description for the action",
          "     * icon: (string) An svg or img tag to display as the icon for the action (optional)",
          "   * Convenience parameters:",
          "     * empty: (boolean) If true, the handler is set to a no-op function and the description is set to \"No action\".",
          "       This is useful for creating empty slots in the grid.",
          "       Overrides handler, description, and icon.",
          "     * application: (string) The name of an application to switch to.",
          "       Overrides handler.",
          "       If description/icon are not provided, set to app name/icon.",
          "     * submenu: (table) A table of actions to create a submenu for this action.",
          "       Overrides handler.",
          ""
        ],
        "returns": [],
        "signature": "GridCraft.Action.new(table) -> table",
        "stripped_doc": [
          "Create a new action for a grid",
          ""
        ],
        "type": "Constructor"
      }
    ],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [],
    "Variable": [],
    "desc": "Hotkeys and their handless.",
    "doc": "Hotkeys and their handless.",
    "items": [
      {
        "def": "GridCraft.Action.new(table) -> table",
        "desc": "Create a new action for a grid",
        "doc": "Create a new action for a grid\n\nParameters:\n * arg - A table containing the parameters for the action.\n   * Basic parameters:\n     * mods: (table) Modifier keys like `{\"cmd\", \"ctrl\"}` to trigger the action along with the key. Use `{}` for no modifiers\n     * key: (string) A key to trigger the action along with the modifiers, like \"x\" or \"F11\".\n     * handler: (function) Code to run when the key is pressed\n     * description: (string) A description for the action\n     * icon: (string) An svg or img tag to display as the icon for the action (optional)\n   * Convenience parameters:\n     * empty: (boolean) If true, the handler is set to a no-op function and the description is set to \"No action\".\n       This is useful for creating empty slots in the grid.\n       Overrides handler, description, and icon.\n     * application: (string) The name of an application to switch to.\n       Overrides handler.\n       If description/icon are not provided, set to app name/icon.\n     * submenu: (table) A table of actions to create a submenu for this action.\n       Overrides handler.\n\nNotes:\n * Together, the mods and key are passed to `hs.hotkey.bind()` to create a regular Hammerspoon hotkey.",
        "name": "new",
        "notes": [
          " * Together, the mods and key are passed to `hs.hotkey.bind()` to create a regular Hammerspoon hotkey."
        ],
        "parameters": [
          " * arg - A table containing the parameters for the action.",
          "   * Basic parameters:",
          "     * mods: (table) Modifier keys like `{\"cmd\", \"ctrl\"}` to trigger the action along with the key. Use `{}` for no modifiers",
          "     * key: (string) A key to trigger the action along with the modifiers, like \"x\" or \"F11\".",
          "     * handler: (function) Code to run when the key is pressed",
          "     * description: (string) A description for the action",
          "     * icon: (string) An svg or img tag to display as the icon for the action (optional)",
          "   * Convenience parameters:",
          "     * empty: (boolean) If true, the handler is set to a no-op function and the description is set to \"No action\".",
          "       This is useful for creating empty slots in the grid.",
          "       Overrides handler, description, and icon.",
          "     * application: (string) The name of an application to switch to.",
          "       Overrides handler.",
          "       If description/icon are not provided, set to app name/icon.",
          "     * submenu: (table) A table of actions to create a submenu for this action.",
          "       Overrides handler.",
          ""
        ],
        "returns": [],
        "signature": "GridCraft.Action.new(table) -> table",
        "stripped_doc": [
          "Create a new action for a grid",
          ""
        ],
        "type": "Constructor"
      }
    ],
    "name": "GridCraft.Action",
    "stripped_doc": [],
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [
      {
        "def": "GridCraft.Configuration.new() -> table",
        "desc": "Create a new configuration object for a GridCraft grid.",
        "doc": "Create a new configuration object for a GridCraft grid.\n\nReturns:\n* A GridCraft.Configuration object",
        "name": "new",
        "notes": [],
        "parameters": [],
        "returns": [
          "* A GridCraft.Configuration object"
        ],
        "signature": "GridCraft.Configuration.new() -> table",
        "stripped_doc": [
          "Create a new configuration object for a GridCraft grid.",
          ""
        ],
        "type": "Constructor"
      }
    ],
    "Deprecated": [],
    "Field": [
      {
        "def": "GridCraft.Configuration.animationMs",
        "desc": "Time for key-seledction animation in ms, default is 150ms.",
        "doc": "Time for key-seledction animation in ms, default is 150ms.",
        "name": "animationMs",
        "notes": [],
        "parameters": [],
        "returns": [],
        "signature": "GridCraft.Configuration.animationMs",
        "stripped_doc": [
          "Time for key-seledction animation in ms, default is 150ms."
        ],
        "type": "Field"
      },
      {
        "def": "GridCraft.Configuration.gridMaxWidth",
        "desc": "The max width for the grid in px, default is 1024",
        "doc": "The max width for the grid in px, default is 1024",
        "name": "gridMaxWidth",
        "notes": [],
        "parameters": [],
        "returns": [],
        "signature": "GridCraft.Configuration.gridMaxWidth",
        "stripped_doc": [
          "The max width for the grid in px, default is 1024"
        ],
        "type": "Field"
      },
      {
        "def": "GridCraft.Configuration.gridMaxHeight",
        "desc": "The max height for the grid in px, default is 768",
        "doc": "The max height for the grid in px, default is 768",
        "name": "gridMaxHeight",
        "notes": [],
        "parameters": [],
        "returns": [],
        "signature": "GridCraft.Configuration.gridMaxHeight",
        "stripped_doc": [
          "The max height for the grid in px, default is 768"
        ],
        "type": "Field"
      }
    ],
    "Function": [],
    "Method": [
      {
        "def": "GridCraft.Configuration:animationSeconds() -> number",
        "desc": "Time for key-selection animation in seconds (derived from animationMs)",
        "doc": "Time for key-selection animation in seconds (derived from animationMs)",
        "name": "animationSeconds",
        "notes": [],
        "parameters": [],
        "returns": [],
        "signature": "GridCraft.Configuration:animationSeconds() -> number",
        "stripped_doc": [
          "Time for key-selection animation in seconds (derived from animationMs)"
        ],
        "type": "Method"
      },
      {
        "def": "GridCraft.Configuration:toJSON() -> string",
        "desc": "Return the configuration as a JSON string.",
        "doc": "Return the configuration as a JSON string.",
        "name": "toJSON",
        "notes": [],
        "parameters": [],
        "returns": [],
        "signature": "GridCraft.Configuration:toJSON() -> string",
        "stripped_doc": [
          "Return the configuration as a JSON string."
        ],
        "type": "Method"
      },
      {
        "def": "GridCraft.Configuration:replace() -> GridCraft.Configuration",
        "desc": "Replace ALL values of the configuration with values from the upddate object",
        "doc": "Replace ALL values of the configuration with values from the upddate object\n\nParameters:\n * updateConfig - A table containing new configuration values.\n\nReturns:\n* The configuration object itself, for chaining.\n\nNotes:\n* If a key is missing in the updateConfig, the value in the existing configuration will be set to nil.",
        "name": "replace",
        "notes": [
          "* If a key is missing in the updateConfig, the value in the existing configuration will be set to nil."
        ],
        "parameters": [
          " * updateConfig - A table containing new configuration values.",
          ""
        ],
        "returns": [
          "* The configuration object itself, for chaining.",
          ""
        ],
        "signature": "GridCraft.Configuration:replace() -> GridCraft.Configuration",
        "stripped_doc": [
          "Replace ALL values of the configuration with values from the upddate object",
          ""
        ],
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Configuration parameters for a GridCraft grid.",
    "doc": "Configuration parameters for a GridCraft grid.",
    "items": [
      {
        "def": "GridCraft.Configuration.new() -> table",
        "desc": "Create a new configuration object for a GridCraft grid.",
        "doc": "Create a new configuration object for a GridCraft grid.\n\nReturns:\n* A GridCraft.Configuration object",
        "name": "new",
        "notes": [],
        "parameters": [],
        "returns": [
          "* A GridCraft.Configuration object"
        ],
        "signature": "GridCraft.Configuration.new() -> table",
        "stripped_doc": [
          "Create a new configuration object for a GridCraft grid.",
          ""
        ],
        "type": "Constructor"
      },
      {
        "def": "GridCraft.Configuration.animationMs",
        "desc": "Time for key-seledction animation in ms, default is 150ms.",
        "doc": "Time for key-seledction animation in ms, default is 150ms.",
        "name": "animationMs",
        "notes": [],
        "parameters": [],
        "returns": [],
        "signature": "GridCraft.Configuration.animationMs",
        "stripped_doc": [
          "Time for key-seledction animation in ms, default is 150ms."
        ],
        "type": "Field"
      },
      {
        "def": "GridCraft.Configuration.gridMaxHeight",
        "desc": "The max height for the grid in px, default is 768",
        "doc": "The max height for the grid in px, default is 768",
        "name": "gridMaxHeight",
        "notes": [],
        "parameters": [],
        "returns": [],
        "signature": "GridCraft.Configuration.gridMaxHeight",
        "stripped_doc": [
          "The max height for the grid in px, default is 768"
        ],
        "type": "Field"
      },
      {
        "def": "GridCraft.Configuration.gridMaxWidth",
        "desc": "The max width for the grid in px, default is 1024",
        "doc": "The max width for the grid in px, default is 1024",
        "name": "gridMaxWidth",
        "notes": [],
        "parameters": [],
        "returns": [],
        "signature": "GridCraft.Configuration.gridMaxWidth",
        "stripped_doc": [
          "The max width for the grid in px, default is 1024"
        ],
        "type": "Field"
      },
      {
        "def": "GridCraft.Configuration:animationSeconds() -> number",
        "desc": "Time for key-selection animation in seconds (derived from animationMs)",
        "doc": "Time for key-selection animation in seconds (derived from animationMs)",
        "name": "animationSeconds",
        "notes": [],
        "parameters": [],
        "returns": [],
        "signature": "GridCraft.Configuration:animationSeconds() -> number",
        "stripped_doc": [
          "Time for key-selection animation in seconds (derived from animationMs)"
        ],
        "type": "Method"
      },
      {
        "def": "GridCraft.Configuration:replace() -> GridCraft.Configuration",
        "desc": "Replace ALL values of the configuration with values from the upddate object",
        "doc": "Replace ALL values of the configuration with values from the upddate object\n\nParameters:\n * updateConfig - A table containing new configuration values.\n\nReturns:\n* The configuration object itself, for chaining.\n\nNotes:\n* If a key is missing in the updateConfig, the value in the existing configuration will be set to nil.",
        "name": "replace",
        "notes": [
          "* If a key is missing in the updateConfig, the value in the existing configuration will be set to nil."
        ],
        "parameters": [
          " * updateConfig - A table containing new configuration values.",
          ""
        ],
        "returns": [
          "* The configuration object itself, for chaining.",
          ""
        ],
        "signature": "GridCraft.Configuration:replace() -> GridCraft.Configuration",
        "stripped_doc": [
          "Replace ALL values of the configuration with values from the upddate object",
          ""
        ],
        "type": "Method"
      },
      {
        "def": "GridCraft.Configuration:toJSON() -> string",
        "desc": "Return the configuration as a JSON string.",
        "doc": "Return the configuration as a JSON string.",
        "name": "toJSON",
        "notes": [],
        "parameters": [],
        "returns": [],
        "signature": "GridCraft.Configuration:toJSON() -> string",
        "stripped_doc": [
          "Return the configuration as a JSON string."
        ],
        "type": "Method"
      }
    ],
    "name": "GridCraft.Configuration",
    "stripped_doc": [],
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [
      {
        "def": "GridCraft.Grid.new(table, string, table, string) -> table",
        "desc": "Create a new grid of hotkeys",
        "doc": "Create a new grid of hotkeys\n\nParameters:\n * mods: Modifier keys as could be4 passed to `hs.hotkey.modal.new()`, like `{\"cmd\", \"ctrl\"}` or `{}`\n * key: A key to trigger the modal hotkey as could be passed to `hs.hotkey.modal.new()`, like `t`\n * actionTable: (table) A table of rows, each of which is a table of actions.\n      e.g. to represent the left half of a qwerty keyboard, you might use:\n      ```lua\n      {\n        {\n          GridCraft.handler { key = \"1\", application = \"1Password\" },\n          GridCraft.handler { key = \"2\", application = \"Day One\" },\n          GridCraft.handler { key = \"3\", application = \"Photos\" },\n          GridCraft.handler { key = \"4\", empty = true },\n          GridCraft.handler { key = \"5\", empty = true },\n        },\n        {\n          GridCraft.handler { key = \"q\", application = \"Messages\"},\n          GridCraft.handler { key = \"w\", application = \"Mattermost\" },\n          GridCraft.handler { key = \"e\", application = \"Visual Studio Code\" },\n          GridCraft.handler { key = \"r\", application = \"Bear\" },\n          GridCraft.handler { key = \"t\", application = \"Terminal\" },\n        },\n      }\n      ```\n      Note that we are constrained to using array tables rather than key-value tobles\n      so that the order is preserved.\n * title: (string) (optional) A message prefix to display when communicating to the user about this hot key\n * config: (GridCraft.Configuration) (optional) A configuration object for the grid.\n\nReturns:\n  * A GridCraft grid of hotkeys",
        "name": "new",
        "notes": [],
        "parameters": [
          " * mods: Modifier keys as could be4 passed to `hs.hotkey.modal.new()`, like `{\"cmd\", \"ctrl\"}` or `{}`",
          " * key: A key to trigger the modal hotkey as could be passed to `hs.hotkey.modal.new()`, like `t`",
          " * actionTable: (table) A table of rows, each of which is a table of actions.",
          "      e.g. to represent the left half of a qwerty keyboard, you might use:",
          "      ```lua",
          "      {",
          "        {",
          "          GridCraft.handler { key = \"1\", application = \"1Password\" },",
          "          GridCraft.handler { key = \"2\", application = \"Day One\" },",
          "          GridCraft.handler { key = \"3\", application = \"Photos\" },",
          "          GridCraft.handler { key = \"4\", empty = true },",
          "          GridCraft.handler { key = \"5\", empty = true },",
          "        },",
          "        {",
          "          GridCraft.handler { key = \"q\", application = \"Messages\"},",
          "          GridCraft.handler { key = \"w\", application = \"Mattermost\" },",
          "          GridCraft.handler { key = \"e\", application = \"Visual Studio Code\" },",
          "          GridCraft.handler { key = \"r\", application = \"Bear\" },",
          "          GridCraft.handler { key = \"t\", application = \"Terminal\" },",
          "        },",
          "      }",
          "      ```",
          "      Note that we are constrained to using array tables rather than key-value tobles",
          "      so that the order is preserved.",
          " * title: (string) (optional) A message prefix to display when communicating to the user about this hot key",
          " * config: (GridCraft.Configuration) (optional) A configuration object for the grid.",
          ""
        ],
        "returns": [
          "  * A GridCraft grid of hotkeys"
        ],
        "signature": "GridCraft.Grid.new(table, string, table, string) -> table",
        "stripped_doc": [
          "Create a new grid of hotkeys",
          ""
        ],
        "type": "Constructor"
      }
    ],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "GridCraft.Grid:applyConfiguration()",
        "desc": "Apply the configuration to the grid.",
        "doc": "Apply the configuration to the grid.\n\nNotes:\n * This is run when the grid is created and when setConfiguration() is called,\n   and makes sure that the configuration is applied to the web view, all submenus, etc.",
        "name": "applyConfiguration",
        "notes": [
          " * This is run when the grid is created and when setConfiguration() is called,",
          "   and makes sure that the configuration is applied to the web view, all submenus, etc."
        ],
        "parameters": [],
        "returns": [],
        "signature": "GridCraft.Grid:applyConfiguration()",
        "stripped_doc": [
          "Apply the configuration to the grid.",
          ""
        ],
        "type": "Method"
      },
      {
        "def": "GridCraft.Grid:setConfig(config)",
        "desc": "Set the configuration for the grid.",
        "doc": "Set the configuration for the grid.\n\nParameters:\n * config - A GridCraft.Configuration object containing the configuration for the grid\n\nReturns:\n* The grid object itself, for chaining\n\nNotes:\n* Mutates the existing grid object, so that all references in closures will get the new values.\n* Sets the configuration on all submenus as well.\n* Use this method instead of changing the .config field directly.",
        "name": "setConfig",
        "notes": [
          "* Mutates the existing grid object, so that all references in closures will get the new values.",
          "* Sets the configuration on all submenus as well.",
          "* Use this method instead of changing the .config field directly."
        ],
        "parameters": [
          " * config - A GridCraft.Configuration object containing the configuration for the grid",
          ""
        ],
        "returns": [
          "* The grid object itself, for chaining",
          ""
        ],
        "signature": "GridCraft.Grid:setConfig(config)",
        "stripped_doc": [
          "Set the configuration for the grid.",
          ""
        ],
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "A grid of hotkeys.",
    "doc": "A grid of hotkeys.",
    "items": [
      {
        "def": "GridCraft.Grid.new(table, string, table, string) -> table",
        "desc": "Create a new grid of hotkeys",
        "doc": "Create a new grid of hotkeys\n\nParameters:\n * mods: Modifier keys as could be4 passed to `hs.hotkey.modal.new()`, like `{\"cmd\", \"ctrl\"}` or `{}`\n * key: A key to trigger the modal hotkey as could be passed to `hs.hotkey.modal.new()`, like `t`\n * actionTable: (table) A table of rows, each of which is a table of actions.\n      e.g. to represent the left half of a qwerty keyboard, you might use:\n      ```lua\n      {\n        {\n          GridCraft.handler { key = \"1\", application = \"1Password\" },\n          GridCraft.handler { key = \"2\", application = \"Day One\" },\n          GridCraft.handler { key = \"3\", application = \"Photos\" },\n          GridCraft.handler { key = \"4\", empty = true },\n          GridCraft.handler { key = \"5\", empty = true },\n        },\n        {\n          GridCraft.handler { key = \"q\", application = \"Messages\"},\n          GridCraft.handler { key = \"w\", application = \"Mattermost\" },\n          GridCraft.handler { key = \"e\", application = \"Visual Studio Code\" },\n          GridCraft.handler { key = \"r\", application = \"Bear\" },\n          GridCraft.handler { key = \"t\", application = \"Terminal\" },\n        },\n      }\n      ```\n      Note that we are constrained to using array tables rather than key-value tobles\n      so that the order is preserved.\n * title: (string) (optional) A message prefix to display when communicating to the user about this hot key\n * config: (GridCraft.Configuration) (optional) A configuration object for the grid.\n\nReturns:\n  * A GridCraft grid of hotkeys",
        "name": "new",
        "notes": [],
        "parameters": [
          " * mods: Modifier keys as could be4 passed to `hs.hotkey.modal.new()`, like `{\"cmd\", \"ctrl\"}` or `{}`",
          " * key: A key to trigger the modal hotkey as could be passed to `hs.hotkey.modal.new()`, like `t`",
          " * actionTable: (table) A table of rows, each of which is a table of actions.",
          "      e.g. to represent the left half of a qwerty keyboard, you might use:",
          "      ```lua",
          "      {",
          "        {",
          "          GridCraft.handler { key = \"1\", application = \"1Password\" },",
          "          GridCraft.handler { key = \"2\", application = \"Day One\" },",
          "          GridCraft.handler { key = \"3\", application = \"Photos\" },",
          "          GridCraft.handler { key = \"4\", empty = true },",
          "          GridCraft.handler { key = \"5\", empty = true },",
          "        },",
          "        {",
          "          GridCraft.handler { key = \"q\", application = \"Messages\"},",
          "          GridCraft.handler { key = \"w\", application = \"Mattermost\" },",
          "          GridCraft.handler { key = \"e\", application = \"Visual Studio Code\" },",
          "          GridCraft.handler { key = \"r\", application = \"Bear\" },",
          "          GridCraft.handler { key = \"t\", application = \"Terminal\" },",
          "        },",
          "      }",
          "      ```",
          "      Note that we are constrained to using array tables rather than key-value tobles",
          "      so that the order is preserved.",
          " * title: (string) (optional) A message prefix to display when communicating to the user about this hot key",
          " * config: (GridCraft.Configuration) (optional) A configuration object for the grid.",
          ""
        ],
        "returns": [
          "  * A GridCraft grid of hotkeys"
        ],
        "signature": "GridCraft.Grid.new(table, string, table, string) -> table",
        "stripped_doc": [
          "Create a new grid of hotkeys",
          ""
        ],
        "type": "Constructor"
      },
      {
        "def": "GridCraft.Grid:applyConfiguration()",
        "desc": "Apply the configuration to the grid.",
        "doc": "Apply the configuration to the grid.\n\nNotes:\n * This is run when the grid is created and when setConfiguration() is called,\n   and makes sure that the configuration is applied to the web view, all submenus, etc.",
        "name": "applyConfiguration",
        "notes": [
          " * This is run when the grid is created and when setConfiguration() is called,",
          "   and makes sure that the configuration is applied to the web view, all submenus, etc."
        ],
        "parameters": [],
        "returns": [],
        "signature": "GridCraft.Grid:applyConfiguration()",
        "stripped_doc": [
          "Apply the configuration to the grid.",
          ""
        ],
        "type": "Method"
      },
      {
        "def": "GridCraft.Grid:setConfig(config)",
        "desc": "Set the configuration for the grid.",
        "doc": "Set the configuration for the grid.\n\nParameters:\n * config - A GridCraft.Configuration object containing the configuration for the grid\n\nReturns:\n* The grid object itself, for chaining\n\nNotes:\n* Mutates the existing grid object, so that all references in closures will get the new values.\n* Sets the configuration on all submenus as well.\n* Use this method instead of changing the .config field directly.",
        "name": "setConfig",
        "notes": [
          "* Mutates the existing grid object, so that all references in closures will get the new values.",
          "* Sets the configuration on all submenus as well.",
          "* Use this method instead of changing the .config field directly."
        ],
        "parameters": [
          " * config - A GridCraft.Configuration object containing the configuration for the grid",
          ""
        ],
        "returns": [
          "* The grid object itself, for chaining",
          ""
        ],
        "signature": "GridCraft.Grid:setConfig(config)",
        "stripped_doc": [
          "Set the configuration for the grid.",
          ""
        ],
        "type": "Method"
      }
    ],
    "name": "GridCraft.Grid",
    "stripped_doc": [],
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [
      {
        "def": "GridCraft.Icon.phosphor(name, [weight]) -> string or nil",
        "desc": "Create an icon from a Phosphor icon name and weight",
        "doc": "Create an icon from a Phosphor icon name and weight\n\nParameters:\n * name - The name of the Phosphor icon (e.g., \"app-window\")\n * weight - The weight of the icon (e.g., \"regular\", \"bold\", \"duotone\"). Defaults to \"regular\".",
        "name": "phosphor",
        "notes": [],
        "parameters": [
          " * name - The name of the Phosphor icon (e.g., \"app-window\")",
          " * weight - The weight of the icon (e.g., \"regular\", \"bold\", \"duotone\"). Defaults to \"regular\"."
        ],
        "returns": [],
        "signature": "GridCraft.Icon.phosphor(name, [weight]) -> string or nil",
        "stripped_doc": [
          "Create an icon from a Phosphor icon name and weight",
          ""
        ],
        "type": "Function"
      },
      {
        "def": "GridCraft.Icon.macFile(filePath) -> string or nil",
        "desc": "Create an icon from the icon of a macOS file (including folders, applications, etc)",
        "doc": "Create an icon from the icon of a macOS file (including folders, applications, etc)\n\nParameters:\n * filePath - The path to the file or application for which to get the icon",
        "name": "macFile",
        "notes": [],
        "parameters": [
          " * filePath - The path to the file or application for which to get the icon"
        ],
        "returns": [],
        "signature": "GridCraft.Icon.macFile(filePath) -> string or nil",
        "stripped_doc": [
          "Create an icon from the icon of a macOS file (including folders, applications, etc)",
          ""
        ],
        "type": "Function"
      },
      {
        "def": "GridCraft.Icon.empty() -> string",
        "desc": "Create an empty icon, which is a transparent PNG image",
        "doc": "Create an empty icon, which is a transparent PNG image\n\nParameters:\n * None\n\nReturns:\n * string containing an img tag with the transparent PNG data",
        "name": "empty",
        "notes": [],
        "parameters": [
          " * None",
          ""
        ],
        "returns": [
          " * string containing an img tag with the transparent PNG data"
        ],
        "signature": "GridCraft.Icon.empty() -> string",
        "stripped_doc": [
          "Create an empty icon, which is a transparent PNG image",
          ""
        ],
        "type": "Function"
      }
    ],
    "Method": [],
    "Variable": [],
    "desc": "Icons etc",
    "doc": "Icons etc",
    "items": [
      {
        "def": "GridCraft.Icon.empty() -> string",
        "desc": "Create an empty icon, which is a transparent PNG image",
        "doc": "Create an empty icon, which is a transparent PNG image\n\nParameters:\n * None\n\nReturns:\n * string containing an img tag with the transparent PNG data",
        "name": "empty",
        "notes": [],
        "parameters": [
          " * None",
          ""
        ],
        "returns": [
          " * string containing an img tag with the transparent PNG data"
        ],
        "signature": "GridCraft.Icon.empty() -> string",
        "stripped_doc": [
          "Create an empty icon, which is a transparent PNG image",
          ""
        ],
        "type": "Function"
      },
      {
        "def": "GridCraft.Icon.macFile(filePath) -> string or nil",
        "desc": "Create an icon from the icon of a macOS file (including folders, applications, etc)",
        "doc": "Create an icon from the icon of a macOS file (including folders, applications, etc)\n\nParameters:\n * filePath - The path to the file or application for which to get the icon",
        "name": "macFile",
        "notes": [],
        "parameters": [
          " * filePath - The path to the file or application for which to get the icon"
        ],
        "returns": [],
        "signature": "GridCraft.Icon.macFile(filePath) -> string or nil",
        "stripped_doc": [
          "Create an icon from the icon of a macOS file (including folders, applications, etc)",
          ""
        ],
        "type": "Function"
      },
      {
        "def": "GridCraft.Icon.phosphor(name, [weight]) -> string or nil",
        "desc": "Create an icon from a Phosphor icon name and weight",
        "doc": "Create an icon from a Phosphor icon name and weight\n\nParameters:\n * name - The name of the Phosphor icon (e.g., \"app-window\")\n * weight - The weight of the icon (e.g., \"regular\", \"bold\", \"duotone\"). Defaults to \"regular\".",
        "name": "phosphor",
        "notes": [],
        "parameters": [
          " * name - The name of the Phosphor icon (e.g., \"app-window\")",
          " * weight - The weight of the icon (e.g., \"regular\", \"bold\", \"duotone\"). Defaults to \"regular\"."
        ],
        "returns": [],
        "signature": "GridCraft.Icon.phosphor(name, [weight]) -> string or nil",
        "stripped_doc": [
          "Create an icon from a Phosphor icon name and weight",
          ""
        ],
        "type": "Function"
      }
    ],
    "name": "GridCraft.Icon",
    "stripped_doc": [],
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [
      {
        "def": "GridCraft.Util.getApplicationIconDataUri(string, hs.application) -> string or nil",
        "desc": "Get an application icon as a data: URI",
        "doc": "Get an application icon as a data: URI\n\nParameters:\n * appName - The name of the application (used for logging)\n * application - The hs.application object of the application\n\nReturns:\n * A string containing a data URI with base64-encoded PNG data of the application icon, or nil if the icon cannot be retrieved",
        "name": "getApplicationIconDataUri",
        "notes": [],
        "parameters": [
          " * appName - The name of the application (used for logging)",
          " * application - The hs.application object of the application",
          ""
        ],
        "returns": [
          " * A string containing a data URI with base64-encoded PNG data of the application icon, or nil if the icon cannot be retrieved"
        ],
        "signature": "GridCraft.Util.getApplicationIconDataUri(string, hs.application) -> string or nil",
        "stripped_doc": [
          "Get an application icon as a data: URI",
          ""
        ],
        "type": "Function"
      },
      {
        "def": "GridCraft.Util.fileContents(string) -> string or nil",
        "desc": "Get the contents of a file at a given path",
        "doc": "Get the contents of a file at a given path\n\nParameters:\n * fullPath - The full path to the file",
        "name": "fileContents",
        "notes": [],
        "parameters": [
          " * fullPath - The full path to the file"
        ],
        "returns": [],
        "signature": "GridCraft.Util.fileContents(string) -> string or nil",
        "stripped_doc": [
          "Get the contents of a file at a given path",
          ""
        ],
        "type": "Function"
      },
      {
        "def": "GridCraft.Util.base64(string) -> string",
        "desc": "Encode a string in base64 format",
        "doc": "Encode a string in base64 format\n\nParameters:\n * data - The string to encode",
        "name": "base64",
        "notes": [],
        "parameters": [
          " * data - The string to encode"
        ],
        "returns": [],
        "signature": "GridCraft.Util.base64(string) -> string",
        "stripped_doc": [
          "Encode a string in base64 format",
          ""
        ],
        "type": "Function"
      },
      {
        "def": "GridCraft.Util.findApplicationPath(string) -> string or nil",
        "desc": "Find an application path by its name",
        "doc": "Find an application path by its name\n\nParameters:\n * appName - The name of the application to find",
        "name": "findApplicationPath",
        "notes": [],
        "parameters": [
          " * appName - The name of the application to find"
        ],
        "returns": [],
        "signature": "GridCraft.Util.findApplicationPath(string) -> string or nil",
        "stripped_doc": [
          "Find an application path by its name",
          ""
        ],
        "type": "Function"
      },
      {
        "def": "GridCraft.Util.getBasename(string) -> string",
        "desc": "Get the last component of a file path, or \"/\" if the path is the root directory",
        "doc": "Get the last component of a file path, or \"/\" if the path is the root directory\n\nParameters:\n * path - The file path to get the basename from",
        "name": "getBasename",
        "notes": [],
        "parameters": [
          " * path - The file path to get the basename from"
        ],
        "returns": [],
        "signature": "GridCraft.Util.getBasename(string) -> string",
        "stripped_doc": [
          "Get the last component of a file path, or \"/\" if the path is the root directory",
          ""
        ],
        "type": "Function"
      }
    ],
    "Method": [],
    "Variable": [],
    "desc": "Generic utility functions",
    "doc": "Generic utility functions",
    "items": [
      {
        "def": "GridCraft.Util.base64(string) -> string",
        "desc": "Encode a string in base64 format",
        "doc": "Encode a string in base64 format\n\nParameters:\n * data - The string to encode",
        "name": "base64",
        "notes": [],
        "parameters": [
          " * data - The string to encode"
        ],
        "returns": [],
        "signature": "GridCraft.Util.base64(string) -> string",
        "stripped_doc": [
          "Encode a string in base64 format",
          ""
        ],
        "type": "Function"
      },
      {
        "def": "GridCraft.Util.fileContents(string) -> string or nil",
        "desc": "Get the contents of a file at a given path",
        "doc": "Get the contents of a file at a given path\n\nParameters:\n * fullPath - The full path to the file",
        "name": "fileContents",
        "notes": [],
        "parameters": [
          " * fullPath - The full path to the file"
        ],
        "returns": [],
        "signature": "GridCraft.Util.fileContents(string) -> string or nil",
        "stripped_doc": [
          "Get the contents of a file at a given path",
          ""
        ],
        "type": "Function"
      },
      {
        "def": "GridCraft.Util.findApplicationPath(string) -> string or nil",
        "desc": "Find an application path by its name",
        "doc": "Find an application path by its name\n\nParameters:\n * appName - The name of the application to find",
        "name": "findApplicationPath",
        "notes": [],
        "parameters": [
          " * appName - The name of the application to find"
        ],
        "returns": [],
        "signature": "GridCraft.Util.findApplicationPath(string) -> string or nil",
        "stripped_doc": [
          "Find an application path by its name",
          ""
        ],
        "type": "Function"
      },
      {
        "def": "GridCraft.Util.getApplicationIconDataUri(string, hs.application) -> string or nil",
        "desc": "Get an application icon as a data: URI",
        "doc": "Get an application icon as a data: URI\n\nParameters:\n * appName - The name of the application (used for logging)\n * application - The hs.application object of the application\n\nReturns:\n * A string containing a data URI with base64-encoded PNG data of the application icon, or nil if the icon cannot be retrieved",
        "name": "getApplicationIconDataUri",
        "notes": [],
        "parameters": [
          " * appName - The name of the application (used for logging)",
          " * application - The hs.application object of the application",
          ""
        ],
        "returns": [
          " * A string containing a data URI with base64-encoded PNG data of the application icon, or nil if the icon cannot be retrieved"
        ],
        "signature": "GridCraft.Util.getApplicationIconDataUri(string, hs.application) -> string or nil",
        "stripped_doc": [
          "Get an application icon as a data: URI",
          ""
        ],
        "type": "Function"
      },
      {
        "def": "GridCraft.Util.getBasename(string) -> string",
        "desc": "Get the last component of a file path, or \"/\" if the path is the root directory",
        "doc": "Get the last component of a file path, or \"/\" if the path is the root directory\n\nParameters:\n * path - The file path to get the basename from",
        "name": "getBasename",
        "notes": [],
        "parameters": [
          " * path - The file path to get the basename from"
        ],
        "returns": [],
        "signature": "GridCraft.Util.getBasename(string) -> string",
        "stripped_doc": [
          "Get the last component of a file path, or \"/\" if the path is the root directory",
          ""
        ],
        "type": "Function"
      }
    ],
    "name": "GridCraft.Util",
    "stripped_doc": [],
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [
      {
        "def": "GridCraft.WebView.css",
        "desc": "The CSS for the web view",
        "doc": "The CSS for the web view",
        "name": "css",
        "notes": [],
        "parameters": [],
        "returns": [],
        "signature": "GridCraft.WebView.css",
        "stripped_doc": [
          "The CSS for the web view"
        ],
        "type": "Constant"
      },
      {
        "def": "GridCraft.WebView.js",
        "desc": "The JavaScript for the web view",
        "doc": "The JavaScript for the web view",
        "name": "js",
        "notes": [],
        "parameters": [],
        "returns": [],
        "signature": "GridCraft.WebView.js",
        "stripped_doc": [
          "The JavaScript for the web view"
        ],
        "type": "Constant"
      }
    ],
    "Constructor": [
      {
        "def": "GridCraft.WebView.webView(string, table, number, number) -> hs.webview object",
        "desc": "Creates a new web view intended for modal messages.",
        "doc": "Creates a new web view intended for modal messages.\n\nParameters:\n * title - (string) The title of the web view\n * items - (table) A list of rows, each of which is a table of actions.\n * config - (table) A GridCraft.Configuration object\n\nReturns:\n * A hs.webview object",
        "name": "webView",
        "notes": [],
        "parameters": [
          " * title - (string) The title of the web view",
          " * items - (table) A list of rows, each of which is a table of actions.",
          " * config - (table) A GridCraft.Configuration object",
          ""
        ],
        "returns": [
          " * A hs.webview object"
        ],
        "signature": "GridCraft.WebView.webView(string, table, number, number) -> hs.webview object",
        "stripped_doc": [
          "Creates a new web view intended for modal messages.",
          ""
        ],
        "type": "Constructor"
      }
    ],
    "Deprecated": [],
    "Field": [],
    "Function": [
      {
        "def": "GridCraft.WebView.itemTableHtml(table) -> string",
        "desc": "Generates an HTML table from a list of items.",
        "doc": "Generates an HTML table from a list of items.\n\nParameters:\n * actionTable - A table of rows, each of which is a table of actions.\n\nReturns:\n * string containing the HTML for the item table",
        "name": "itemTableHtml",
        "notes": [],
        "parameters": [
          " * actionTable - A table of rows, each of which is a table of actions.",
          ""
        ],
        "returns": [
          " * string containing the HTML for the item table"
        ],
        "signature": "GridCraft.WebView.itemTableHtml(table) -> string",
        "stripped_doc": [
          "Generates an HTML table from a list of items.",
          ""
        ],
        "type": "Function"
      },
      {
        "def": "GridCraft.WebView.webViewHtml(string, string) -> string",
        "desc": "Generates the complete HTML for a web view, including the title, CSS, JS, and item table.",
        "doc": "Generates the complete HTML for a web view, including the title, CSS, JS, and item table.\n\nParameters:\n * title - The title of the web view\n * itemTable - The HTML table generated from the actionTable\n * config - A GridCraft.Configuration object containing the configuration for the grid\n\nReturns:\n * string containing the complete HTML for the web view",
        "name": "webViewHtml",
        "notes": [],
        "parameters": [
          " * title - The title of the web view",
          " * itemTable - The HTML table generated from the actionTable",
          " * config - A GridCraft.Configuration object containing the configuration for the grid",
          ""
        ],
        "returns": [
          " * string containing the complete HTML for the web view"
        ],
        "signature": "GridCraft.WebView.webViewHtml(string, string) -> string",
        "stripped_doc": [
          "Generates the complete HTML for a web view, including the title, CSS, JS, and item table.",
          ""
        ],
        "type": "Function"
      },
      {
        "def": "GridCraft.WebView.resizeCenter(hs.webview.object, [number], [number]) -> hs.webview.object",
        "desc": "Resizes and centers a web view on the main screen.",
        "doc": "Resizes and centers a web view on the main screen.\n\nParameters:\n * wv - The web view to resize and center\n * width - The desired width of the web view\n * height - The desired height of the web viewBox\n\nReturns:\n * The resized and centered web view",
        "name": "resizeCenter",
        "notes": [],
        "parameters": [
          " * wv - The web view to resize and center",
          " * width - The desired width of the web view",
          " * height - The desired height of the web viewBox",
          ""
        ],
        "returns": [
          " * The resized and centered web view"
        ],
        "signature": "GridCraft.WebView.resizeCenter(hs.webview.object, [number], [number]) -> hs.webview.object",
        "stripped_doc": [
          "Resizes and centers a web view on the main screen.",
          ""
        ],
        "type": "Function"
      }
    ],
    "Method": [],
    "Variable": [],
    "desc": "The web view that displays the grid.",
    "doc": "The web view that displays the grid.\nUsers won't interact with this module directly, but it is used by the GridCraft module.",
    "items": [
      {
        "def": "GridCraft.WebView.css",
        "desc": "The CSS for the web view",
        "doc": "The CSS for the web view",
        "name": "css",
        "notes": [],
        "parameters": [],
        "returns": [],
        "signature": "GridCraft.WebView.css",
        "stripped_doc": [
          "The CSS for the web view"
        ],
        "type": "Constant"
      },
      {
        "def": "GridCraft.WebView.js",
        "desc": "The JavaScript for the web view",
        "doc": "The JavaScript for the web view",
        "name": "js",
        "notes": [],
        "parameters": [],
        "returns": [],
        "signature": "GridCraft.WebView.js",
        "stripped_doc": [
          "The JavaScript for the web view"
        ],
        "type": "Constant"
      },
      {
        "def": "GridCraft.WebView.itemTableHtml(table) -> string",
        "desc": "Generates an HTML table from a list of items.",
        "doc": "Generates an HTML table from a list of items.\n\nParameters:\n * actionTable - A table of rows, each of which is a table of actions.\n\nReturns:\n * string containing the HTML for the item table",
        "name": "itemTableHtml",
        "notes": [],
        "parameters": [
          " * actionTable - A table of rows, each of which is a table of actions.",
          ""
        ],
        "returns": [
          " * string containing the HTML for the item table"
        ],
        "signature": "GridCraft.WebView.itemTableHtml(table) -> string",
        "stripped_doc": [
          "Generates an HTML table from a list of items.",
          ""
        ],
        "type": "Function"
      },
      {
        "def": "GridCraft.WebView.resizeCenter(hs.webview.object, [number], [number]) -> hs.webview.object",
        "desc": "Resizes and centers a web view on the main screen.",
        "doc": "Resizes and centers a web view on the main screen.\n\nParameters:\n * wv - The web view to resize and center\n * width - The desired width of the web view\n * height - The desired height of the web viewBox\n\nReturns:\n * The resized and centered web view",
        "name": "resizeCenter",
        "notes": [],
        "parameters": [
          " * wv - The web view to resize and center",
          " * width - The desired width of the web view",
          " * height - The desired height of the web viewBox",
          ""
        ],
        "returns": [
          " * The resized and centered web view"
        ],
        "signature": "GridCraft.WebView.resizeCenter(hs.webview.object, [number], [number]) -> hs.webview.object",
        "stripped_doc": [
          "Resizes and centers a web view on the main screen.",
          ""
        ],
        "type": "Function"
      },
      {
        "def": "GridCraft.WebView.webViewHtml(string, string) -> string",
        "desc": "Generates the complete HTML for a web view, including the title, CSS, JS, and item table.",
        "doc": "Generates the complete HTML for a web view, including the title, CSS, JS, and item table.\n\nParameters:\n * title - The title of the web view\n * itemTable - The HTML table generated from the actionTable\n * config - A GridCraft.Configuration object containing the configuration for the grid\n\nReturns:\n * string containing the complete HTML for the web view",
        "name": "webViewHtml",
        "notes": [],
        "parameters": [
          " * title - The title of the web view",
          " * itemTable - The HTML table generated from the actionTable",
          " * config - A GridCraft.Configuration object containing the configuration for the grid",
          ""
        ],
        "returns": [
          " * string containing the complete HTML for the web view"
        ],
        "signature": "GridCraft.WebView.webViewHtml(string, string) -> string",
        "stripped_doc": [
          "Generates the complete HTML for a web view, including the title, CSS, JS, and item table.",
          ""
        ],
        "type": "Function"
      },
      {
        "def": "GridCraft.WebView.webView(string, table, number, number) -> hs.webview object",
        "desc": "Creates a new web view intended for modal messages.",
        "doc": "Creates a new web view intended for modal messages.\n\nParameters:\n * title - (string) The title of the web view\n * items - (table) A list of rows, each of which is a table of actions.\n * config - (table) A GridCraft.Configuration object\n\nReturns:\n * A hs.webview object",
        "name": "webView",
        "notes": [],
        "parameters": [
          " * title - (string) The title of the web view",
          " * items - (table) A list of rows, each of which is a table of actions.",
          " * config - (table) A GridCraft.Configuration object",
          ""
        ],
        "returns": [
          " * A hs.webview object"
        ],
        "signature": "GridCraft.WebView.webView(string, table, number, number) -> hs.webview object",
        "stripped_doc": [
          "Creates a new web view intended for modal messages.",
          ""
        ],
        "type": "Constructor"
      }
    ],
    "name": "GridCraft.WebView",
    "stripped_doc": [],
    "submodules": [],
    "type": "Module"
  }
]
